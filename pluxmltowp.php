<?php
/**
 * PluXmlToWP
 * @author Benpro
 * TODO: Handle GMT date.
 **/

/* Loading the main files of PluXml. */
include('config.php');
define('PLX_ROOT', './');
define('PLX_CORE', PLX_ROOT.'core/');
define('PLX_CONF', PLX_ROOT.'data/configuration/parametres.xml');
include(PLX_CORE.'lib/class.plx.date.php');
include(PLX_CORE.'lib/class.plx.glob.php');
include(PLX_CORE.'lib/class.plx.utils.php');
include(PLX_CORE.'lib/class.plx.capcha.php');
include(PLX_CORE.'lib/class.plx.erreur.php');
include(PLX_CORE.'lib/class.plx.record.php');
include(PLX_CORE.'lib/class.plx.motor.php');
include(PLX_CORE.'lib/class.plx.feed.php');
include(PLX_CORE.'lib/class.plx.show.php');
include(PLX_CORE.'lib/class.plx.encrypt.php');
include(PLX_CORE.'lib/class.plx.plugins.php');
include(PLX_CORE.'lib/class.plx.admin.php');
$plxMotor = plxMotor::getInstance();
$plxAdmin = plxAdmin::getInstance();
loadLang(PLX_CORE.'lang/'.$plxMotor->aConf['default_lang'].'/core.php');

/**
 * @desc Return usage/help.
 */
function usage() {

	$text  = "Welcome to PluXmlToWP!\n\n";
	$text .= "Usage : \n";
	$text .= "php pluxmltowp.php [-a PATH_TO_PLUXML_ARTICLES]";
	$text .= " [-o PATH_TO_OUTPUT_XML_RESULT] [-h display help]\n\n";
	$text .= "If no output set (-o), output to stdout.";

	echo $text;
}

/* XML Header for WordPress. */
$xmlWPHeader  = '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
$xmlWPHeader .= '<!-- This is a WordPress eXtended RSS file generated by PluXmlToWP as an export of PluXml. -->' . "\n";
$xmlWPHeader .= "<!-- It contains information about posts, comments and categories. -->" . "\n";
$xmlWPHeader .= '<!-- You may use this file to migrate from PluXml to WordPress. -->' . "\n";
$xmlWPHeader .= '' . "\n";
$xmlWPHeader .= '<!-- To import this information into a WordPress site follow these steps: -->' . "\n";
$xmlWPHeader .= '<!-- 1. Log in to that site as an administrator. -->' . "\n";
$xmlWPHeader .= '<!-- 2. Go to Tools: Import in the WordPress admin panel. -->' . "\n";
$xmlWPHeader .= '<!-- 3. Install the "WordPress" importer from the list. -->' . "\n";
$xmlWPHeader .= '<!-- 4. Activate & Run Importer. -->' . "\n";
$xmlWPHeader .= '<!-- 5. Upload this file using the form provided on that page. -->' . "\n";
$xmlWPHeader .= '<!-- 6. You will first be asked to map the authors in this export file to users -->' . "\n";
$xmlWPHeader .= '<!--    on the site. For each author, you may choose to map to an -->' . "\n";
$xmlWPHeader .= '<!--    existing user on the site or to create a new user. -->' . "\n";
$xmlWPHeader .= '<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->' . "\n";
$xmlWPHeader .= '<!--    contained in this file into your site. -->' . "\n";
$xmlWPHeader .= '' . "\n";
$xmlWPHeader .= '<!-- generator="PluXmlToWP" created="' . date('r') . '" -->' . "\n";
$xmlWPHeader .= '<rss version="2.0"' . "\n";
$xmlWPHeader .= "\t" . 'xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"' . "\n";
$xmlWPHeader .= "\t" . 'xmlns:content="http://purl.org/rss/1.0/modules/content/"' . "\n";
$xmlWPHeader .= "\t" . 'xmlns:wfw="http://wellformedweb.org/CommentAPI/"' . "\n";
$xmlWPHeader .= "\t" . 'xmlns:dc="http://purl.org/dc/elements/1.1/"' . "\n";
$xmlWPHeader .= "\t" . 'xmlns:wp="http://wordpress.org/export/1.1/"' . "\n";
$xmlWPHeader .= '>';

/*
 * ----------------------------------------------------------------------------
 * XXXXXXXXX
 * ----------------------------------------------------------------------------
 */

/* Handling of arguments. */
$options = getopt("h::a:c:o:");

/*
 * Search if there is the required arguments in $options. 'a' for articles
 * and 'c' for comments.
 * If not, display usage, else, all good!
 */
if ((array_key_exists('h', $options))) {
	usage();
	exit();
} else {
	$articlesPath = (!isset($options['a']))
		? $plxMotor->aConf['racine_articles'] : $options['a'];
	$outputPath   = (!isset($options['o'])) ? $options['o'] : 'stdout';
}
/* Parse all XML articles in a big array. */
$plxGlob = plxGlob::getInstance(PLX_ROOT . $articlesPath, false, true, 'arts');
foreach ($plxGlob->aFiles as $articlesFile) {
	$articles[] = $plxMotor->parseArticle(
		PLX_ROOT . $articlesPath . $articlesFile
	);
}
/* Get all categories of articles stocked in PluXml configuration. */
$categories = $plxMotor->aCats;
/* Get all comments stocked in PluXml xml files. */
$plxMotor->getCommentaires('/^[0-9]{4}.(.*).xml$/', 'rsort', 0, 0, 'all');
$allComments = $plxMotor->plxRecord_coms; // Object of type plxRecord!
/* For each articles convert to WordPress's XML format. */
foreach ($articles as $article) {
	/* Handle attributs of the article. */
	
	/*
	 * Get the date in 'c' format and convert to 'r' format used by
	 * WordPress.
	 */
	$pubDate = new DateTime($article['date']);
	$pubDate = $pubDate->format('r');
	/*
	 * Get categories of the article (in integer format). For each categories
	 * get the name of the category.
	 */
	$articleCategories = explode(',', $article['categorie']);
	foreach ($articleCategories as $articleCategory) {
		$articleCategoriesName[] = $categories[$articleCategory]['name'];
	}
	/* Get the comments associated with the article. */
	if ($article['nb_com'] > 0 ) {
		$thereIsComments = true;
		foreach ($allComments->result as $comment) {
			if ($comment['article'] == $article['numero']) {
				/*
				 * Can be optimized by not loading all comments and searching
				 * the article ID.
				 */
				$articleComments[] = $comment;
			}
		}
	} else { $thereIsComments = false; }
	/* Generate an item in WordPress's XML format. */
	$xmlWPItem = '<item>' . "\n";
	$xmlWPItem .= "\t" . '<title>' . $article['title'] . '</title>' . "\n";
	$xmlWPItem .= "\t" . '<pubDate>' . $pubDate . '</pubDate>' . "\n";
	$xmlWPItem .= "\t" . '<content:encoded><![CDATA[' . $article['content'] . ']]></content:encoded>' . "\n";
	foreach ($articleCategoriesName as $category) {
		$xmlWPItem .= "\t" . '<category><![CDATA[' . $category . ']]></category>' . "\n";
	}
	if ($thereIsComments) {
		foreach ($articleComments as $comment) {
			/* Handle date. */
			$commentDate = new DateTime($comment['date']);
			$commentDate = $commentDate->format('Y-m-d H:i:s');
			$xmlWPItem .= "\t" . '<wp:comment>' . "\n";
			$xmlWPItem .= "\t\t" . '</wp:comment_author><![CDATA[' . $comment['author'] . ']]></wp:comment_author>' . "\n";
			$xmlWPItem .= "\t\t" . '</wp:comment_author_email>' . $comment['mail'] . '</wp:comment_author_email>' . "\n";
			$xmlWPItem .= "\t\t" . '</wp:comment_author_url>' . $comment['site'] . '</wp:comment_author_url>' . "\n";
			$xmlWPItem .= "\t\t" . '</wp:comment_author_IP>' . $comment['ip'] . '</wp:comment_author_IP>' . "\n";
			$xmlWPItem .= "\t\t" . '</wp:comment_date>' . $commentDate . '</wp:comment_date>' . "\n";
			$xmlWPItem .= "\t\t" . '</wp:comment_date_gmt>' . $commentDate . '</wp:comment_date_gmt>' . "\n";
			$xmlWPItem .= "\t\t" . '</wp:comment_content><![CDATA[' . $comment['content'] . ']]></wp:comment_content>' . "\n";
			$xmlWPItem .= "\t" . '</wp:comment>' . "\n";
		}
	}
	$xmlWPItem .= '</item>' . "\n";
	echo $xmlWPItem;
	unset($articleComments);
	unset($articleCategoriesName);
}
// <item>
// <pubDate>Wed, 30 Jan 2009 12:00:00 +0000</pubDate>
// <category>Kites</category>
// <category>Taiwan</category>
// <title>Fun times</title>
// <content:encoded><p>What great times we had...</p><p>And then Bob...</p></content:encoded>
// </item>
// <item>...
//<categorie number="006" active="1" tri="desc" bypage="5" menu="oui" url="coup-de-geule" template="categorie.php"><name><![CDATA[Coup de geule]]></name><description><![CDATA[]]></description><meta_description><![CDATA[]]></meta_description><meta_keywords><![CDATA[]]></meta_keywords></categorie>
?>